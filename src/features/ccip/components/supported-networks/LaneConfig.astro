---
import { LaneConfig } from "@config/data/ccip/types"
import { loadReferenceData, Environment, Version } from "@config/data/ccip/"
import { SupportedChain } from "@config"
import { Address, Aside } from "@components"
import BigNumber from "bignumber.js"
import { utils } from "ethers"
import { getExplorer, getExplorerAddressUrl } from "@features/utils"
import { Tooltip } from "@features/common/Tooltip"

type ConfigProps = {
  laneConfig: LaneConfig
  sourceChain: SupportedChain // key in SupportedChain
  sourceChainRefId: string // id in reference directory
  environment: Environment
  version: Version
}

const contactUrl = "https://chainlinkcommunity.typeform.com/ccip-form?typeform-source=docs.chain.link#ref_id=ccip_docs"
const { laneConfig, sourceChain, environment, sourceChainRefId, version } = Astro.props as ConfigProps
const { rateLimiterConfig, supportedTokens, onRamp } = laneConfig

const normalizeNumber = (bigNum: BigNumber, decimals: number = 18) => {
  const divisor = new BigNumber(10).pow(decimals)
  const normalized = bigNum.dividedBy(divisor)

  return normalized.toNumber()
}

const display = (bigNum: string, decimals: number = 18) => {
  const numberWithoutDecimals = normalizeNumber(new BigNumber(bigNum), decimals).toString()
  return utils.commify(numberWithoutDecimals)
}

const formatTime = (seconds: number) => {
  const minute = 60
  const hour = 3600 // 60*60

  if (seconds < minute) {
    return `${seconds} second${seconds > 1 ? "s" : ""}`
  } else if (seconds < hour && hour - seconds > 300) {
    // if the difference less than 5 minutes(300 seconds), round to hours
    const minutes = Math.round(seconds / minute)
    return `${minutes} minute${minutes > 1 ? "s" : ""}`
  } else {
    let hours = Math.floor(seconds / hour)
    let remainingSeconds = seconds % hour

    // Determine the nearest 5-minute interval
    let minutes = Math.round(remainingSeconds / minute / 5) * 5

    // Round up to the next hour if minutes are 60
    if (minutes === 60) {
      hours += 1
      minutes = 0
    }

    return `${hours}${
      minutes > 0
        ? ` hour${hours > 1 ? "s" : ""} and ${minutes} minute${minutes > 1 ? "s" : ""}`
        : ` hour${hours > 1 ? "s" : ""}`
    }`
  }
}

const displayRate = (capacity: string, rate: string, symbol: string, decimals: number = 18) => {
  const capacityNormalized = normalizeNumber(new BigNumber(capacity), decimals) // normalize capacity
  const rateNormalized = normalizeNumber(new BigNumber(rate), decimals) // normalize capacity

  const totalRefillTime = capacityNormalized / rateNormalized // in seconds
  const displayTime = `${formatTime(totalRefillTime)}`

  return {
    rateSecond: `${rateNormalized} ${symbol}/second`,
    maxThroughput: `Refills from 0 to ${utils.commify(capacityNormalized)} ${symbol} in ${displayTime}`,
  }
}

const explorerUrl = getExplorer(sourceChain)

if (!explorerUrl) throw Error(`Explorer url not found for ${sourceChain}`)

const onRampExplorerUrl = getExplorerAddressUrl(explorerUrl)(onRamp)

let tokensWithExtraInfo: {
  token: string
  address: any
  rateLimiterConfig: { capacity: string; isEnabled: boolean; rate: string }
  name?: string
  decimals: number
}[] = []

const tokensReferenceData = loadReferenceData({ environment, version }).tokensReferenceData
if (supportedTokens) {
  tokensWithExtraInfo = Object.keys(supportedTokens)
    .filter((supportedToken) => {
      const tokenData = tokensReferenceData[supportedToken]
      if (!tokenData) {
        console.error(`Token data not found for supportedToken: ${supportedToken}`)
        return false
      }
      if (!tokenData[sourceChainRefId]) {
        console.error(
          `Chain reference data not found for supportedToken: ${supportedToken}, chainRefId: ${sourceChainRefId}`
        )
        return false
      }

      return !tokenData[sourceChainRefId].allowListEnabled
    })
    .map((supportedToken) => {
      const { tokenAddress, decimals } = tokensReferenceData[supportedToken][sourceChainRefId]
      return {
        token: supportedToken,
        address: tokenAddress,
        rateLimiterConfig: supportedTokens[supportedToken].rateLimiterConfig,
        decimals: decimals,
      }
    })
}
---

<table>
  <thead><tr><th>Parameter</th><th>Value</th></tr></thead>
  <tbody>
    <tr>
      <td>OnRamp address</td>
      <td><Address contractUrl={onRampExplorerUrl} /></td>
    </tr>
  </tbody>
</table>
<br />

{
  tokensWithExtraInfo.length > 0 ? (
    <>
      {rateLimiterConfig && rateLimiterConfig.isEnabled ? (
        <table>
          <>
            <thead>
              <tr>
                <>
                  <th>Aggregate Rate Limit</th>
                  <th>Value</th>
                </>
              </tr>
            </thead>
            <tbody>
              <>
                <tr>
                  <>
                    <td>
                      <Tooltip
                        tip="Maximum amount per transaction"
                        label="Capacity"
                        style={{ marginTop: "0" }}
                        client:load
                      />
                    </td>
                    <td>{display(rateLimiterConfig.capacity)} USD</td>
                  </>
                </tr>
                <tr>
                  <>
                    <td>
                      <Tooltip
                        tip="Rate at which available capacity is replenished"
                        label="Refill rate"
                        style={{ marginTop: "0" }}
                        client:load
                      />
                    </td>
                    <td>
                      {(() => {
                        const { rateSecond, maxThroughput } = displayRate(
                          rateLimiterConfig.capacity,
                          rateLimiterConfig.rate,
                          "USD"
                        )

                        return <Tooltip tip={maxThroughput} label={rateSecond} style={{ marginTop: "0" }} client:load />
                      })()}
                    </td>
                  </>
                </tr>
              </>
            </tbody>
          </>
        </table>
      ) : null}
      <>
        <p>
          <strong>Supported tokens</strong>
        </p>
        <table>
          <thead>
            <tr>
              <th>Symbol</th>
              <th>Token Address</th>
              <th>Decimals</th>
              <th>
                <Tooltip
                  tip="Maximum amount per transaction"
                  label="Rate Limit Capacity"
                  style={{ marginTop: "0" }}
                  client:load
                />
              </th>
              <th>
                <Tooltip
                  tip="Rate at which available capacity is replenished"
                  label="Rate Limit Refill Rate"
                  style={{ marginTop: "0" }}
                  client:load
                />
              </th>
            </tr>
          </thead>
          <tbody>
            {tokensWithExtraInfo.map((tokenWithExtraInfo) => {
              return (
                <tr>
                  <td>{tokenWithExtraInfo.token}</td>
                  <td>
                    <Address
                      contractUrl={getExplorerAddressUrl(explorerUrl)(tokenWithExtraInfo.address)}
                      endLength={4}
                    />
                  </td>
                  <td>{tokenWithExtraInfo.decimals}</td>
                  <td>
                    {tokenWithExtraInfo.rateLimiterConfig?.isEnabled
                      ? display(tokenWithExtraInfo.rateLimiterConfig.capacity, tokenWithExtraInfo.decimals) +
                        " " +
                        tokenWithExtraInfo.token
                      : "N/A"}
                  </td>
                  <td>
                    {tokenWithExtraInfo.rateLimiterConfig?.isEnabled
                      ? (() => {
                          const { rateSecond, maxThroughput } = displayRate(
                            tokenWithExtraInfo.rateLimiterConfig.capacity,
                            tokenWithExtraInfo.rateLimiterConfig.rate,
                            tokenWithExtraInfo.token,
                            tokenWithExtraInfo.decimals
                          )

                          return (
                            <Tooltip tip={maxThroughput} label={rateSecond} style={{ marginTop: "0" }} client:load />
                          )
                        })()
                      : "N/A"}
                  </td>
                </tr>
              )
            })}
          </tbody>
        </table>
      </>
    </>
  ) : (
    <Aside>
      No tokens have currently been listed on this lane. Token issuers may <a href={contactUrl}>contact us</a> to have
      their token listed.
    </Aside>
  )
}
